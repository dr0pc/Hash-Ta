/*
 * HashFrame.java
 *
 * Created on November 9, 2005, 6:54 PM
 */

package hash;

/**
 *
 * @author  gorr
 */
public class HashFrame extends javax.swing.JFrame {
    
    /** Creates new form HashFrame */
    public HashFrame() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        outTA = new javax.swing.JTextArea();
        titleLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        createPanel = new javax.swing.JPanel();
        createButton = new javax.swing.JButton();
        sizeLabel = new javax.swing.JLabel();
        sizeTF = new javax.swing.JTextField();
        insertRndPanel = new javax.swing.JPanel();
        insertRandButton = new javax.swing.JButton();
        rangeLabel = new javax.swing.JLabel();
        rangeTF = new javax.swing.JTextField();
        operationsPanel = new javax.swing.JPanel();
        removeButton = new javax.swing.JButton();
        insertButton = new javax.swing.JButton();
        containsButton = new javax.swing.JButton();
        inputTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        outTA.setEditable(false);
        outTA.setLineWrap(true);
        jScrollPane1.setViewportView(outTA);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Hash Table with Linear Probing");
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(titleLabel, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setPreferredSize(new java.awt.Dimension(100, 100));
        createPanel.setPreferredSize(new java.awt.Dimension(100, 10));
        createButton.setText("create table");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        createPanel.add(createButton);

        sizeLabel.setText("table size:");
        createPanel.add(sizeLabel);

        sizeTF.setText("10");
        sizeTF.setPreferredSize(new java.awt.Dimension(30, 20));
        sizeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeTFActionPerformed(evt);
            }
        });

        createPanel.add(sizeTF);

        jPanel1.add(createPanel);

        insertRndPanel.setPreferredSize(new java.awt.Dimension(100, 10));
        insertRandButton.setText("insert random");
        insertRandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertRandButtonActionPerformed(evt);
            }
        });

        insertRndPanel.add(insertRandButton);

        rangeLabel.setText("random range: 0 to ");
        insertRndPanel.add(rangeLabel);

        rangeTF.setText("20");
        rangeTF.setPreferredSize(new java.awt.Dimension(30, 20));
        insertRndPanel.add(rangeTF);

        jPanel1.add(insertRndPanel);

        operationsPanel.setPreferredSize(new java.awt.Dimension(100, 10));
        removeButton.setText("remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        operationsPanel.add(removeButton);

        insertButton.setText("insert");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        operationsPanel.add(insertButton);

        containsButton.setText("contains");
        containsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                containsButtonActionPerformed(evt);
            }
        });

        operationsPanel.add(containsButton);

        inputTF.setText("0");
        inputTF.setPreferredSize(new java.awt.Dimension(50, 23));
        operationsPanel.add(inputTF);

        jPanel1.add(operationsPanel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-459)/2, (screenSize.height-622)/2, 459, 622);
    }// </editor-fold>//GEN-END:initComponents
    
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int input = getInt(inputTF);
        if (input==-1) return;
        int ncol = table.remove(input);
        if (ncol==-1) outTA.append("\nItem is not in table.");
        else {
            outTA.append("\n"+ input + "is found and removed.\n");
            outTA.append("Number of collisions = "+ ncol+"\n");
            outTA.append("Table:\n"+ table+"\n");
        }
    }//GEN-LAST:event_removeButtonActionPerformed
    
    private void containsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_containsButtonActionPerformed
        int input = getInt(inputTF);
        if (input==-1) return;
        int ncol = table.contains(input);
        if (ncol==-1) outTA.append("\nItem is not in table.");
        else {
            outTA.append("\n"+ input + " is found.\n");
            outTA.append("Table:\n"+ table+"\n");
        }
    }//GEN-LAST:event_containsButtonActionPerformed
    
    public int getInt(javax.swing.JTextField tf) {
        int input = 0;
        try {
            input = Integer.parseInt(tf.getText());
        } catch (Exception e) {
            outTA.append("Error in input.\n");
            return -1;
        }
        return input;
    }
    
    private void insertRandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertRandButtonActionPerformed
        int range = getInt(rangeTF);
        if (range == -1) return;
        int input = (int) (range*Math.random());
        int ncol = table.insert(input);
        if (ncol==-1) outTA.append("\nTable already full.");
        else {
            totalCol += ncol;
            outTA.append("\nInserting "+ input+"\n");
            outTA.append("Number of collisions = "+ ncol+"\n");
            outTA.append("Total number of collisions = "+ totalCol+"\n");
            outTA.append("Table:\n"+ table+"\n");
        }
    }//GEN-LAST:event_insertRandButtonActionPerformed
    
    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        int input = getInt(inputTF);
        if (input==-1) return;
        int ncol = table.insert(input);
        if (ncol==-1) outTA.append("\nTable already full.");
        else {
            totalCol += ncol;
            outTA.append("\nInserting "+ input+"\n");
            outTA.append("Number of collisions = "+ ncol+"\n");
            outTA.append("Total number of collisions = "+ totalCol+"\n");
            outTA.append("Table:\n"+ table +"\n");
        }
    }//GEN-LAST:event_insertButtonActionPerformed
    
    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        totalCol = 0;
        int size = getInt(sizeTF);
        if (size==-1) return;
        
        outTA.setText("\nCreating table of size: "+ size+"\n");
        table = new HashTable(size);
    }//GEN-LAST:event_createButtonActionPerformed
    
    private void sizeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeTFActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_sizeTFActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HashFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton containsButton;
    private javax.swing.JButton createButton;
    private javax.swing.JPanel createPanel;
    private javax.swing.JTextField inputTF;
    private javax.swing.JButton insertButton;
    private javax.swing.JButton insertRandButton;
    private javax.swing.JPanel insertRndPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel operationsPanel;
    private javax.swing.JTextArea outTA;
    private javax.swing.JLabel rangeLabel;
    private javax.swing.JTextField rangeTF;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JTextField sizeTF;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    HashTable table = new HashTable(10);
    int totalCol = 0;
}
